package com.example.hiretop.viewModels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.hiretop.data.datastore.HireTopDataStoreRepos
import com.example.hiretop.models.JobOffer
import com.example.hiretop.models.CandidateProfile
import com.google.firebase.firestore.CollectionReference
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.toObject
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class CandidateViewModel @Inject constructor(
    private val db: FirebaseFirestore,
    private val jobOffersCollection: CollectionReference,
    private val profilesCollection: CollectionReference,
    appDataStore: HireTopDataStoreRepos,
) : ViewModel() {

    // Flow to hold the candidate profile id
    val candidateProfileId: Flow<String?> = appDataStore.candidateProfileId

    // StateFlow to hold the candidate profile
    private val _candidateProfile = MutableStateFlow<CandidateProfile?>(null)
    val candidateProfile: StateFlow<CandidateProfile?> = _candidateProfile

    // StateFlow to hold the recommended job offers
    private val _recommendedJobs = MutableStateFlow<List<JobOffer>?>(null)
    val recommendedJobs: StateFlow<List<JobOffer>?> = _recommendedJobs

    /**
     * Function to fetch job offers based on candidate skills
     */
    fun getRecommendedJobs(candidateSkills: List<String>) {
        viewModelScope.launch(Dispatchers.IO) {
            val querySnapshot = jobOffersCollection
                .whereArrayContainsAny("skills", candidateSkills)
                .get()
                .addOnSuccessListener { snapshot ->
                    val jobOffers = mutableListOf<JobOffer>()
                    for (document in snapshot.documents) {
                        val jobOffer = document.toObject(JobOffer::class.java)
                        jobOffer?.let {
                            jobOffers.add(it)
                        }
                    }
                    TODO("Handle success")
                }
                .addOnFailureListener {
                    TODO("Handle failure")
                }
        }
    }

    /**
     * Function to create a new candidate profile in Firestore
     * @param candidateProfile The candidate profile to be added
     * @param callback Callback to return the document ID generated by Firestore
     */
    fun createNewProfile(candidateProfile: CandidateProfile, callback: (String?) -> Unit) {
        viewModelScope.launch(Dispatchers.IO) {
            profilesCollection
                .add(candidateProfile)
                .addOnSuccessListener { documentReference ->
                    callback(documentReference.id)
                    TODO("Handle success")
                }
                .addOnFailureListener {
                    callback(it.message ?: it.localizedMessage ?: "no error message")
                    TODO("Handle failure")
                }
        }
    }

    /**
     * Function to add or update candidate profile
     */
    fun addOrUpdateCandidateProfile(profileId: String, candidateProfile: CandidateProfile) {
        viewModelScope.launch(Dispatchers.IO) {
            val enterpriseRef = profilesCollection.document(profileId)
            if (candidateProfile.profileId == null) {
                enterpriseRef.set(candidateProfile)
                    .addOnSuccessListener {
                        TODO("Handle success")
                    }
                    .addOnFailureListener {
                        TODO("Handle failure")
                    }
            } else {
                enterpriseRef.set(candidateProfile.copy(profileId = null))
                    .addOnSuccessListener {
                        TODO("Handle success")
                    }
                    .addOnFailureListener {
                        TODO("Handle failure")
                    }
            }
        }
    }

    /**
     * Function to get candidate profile by profile ID
     */
    fun getCandidateProfile(profileId: String, callback: (CandidateProfile?) -> Unit) {
        viewModelScope.launch(Dispatchers.IO) {
            profilesCollection.document(profileId)
                .get()
                .addOnSuccessListener { document ->
                    val profile = document.toObject<CandidateProfile>()
                    _candidateProfile.value = profile
                    callback(profile)
                }
                .addOnFailureListener {
                    callback(null)
                    TODO("Handle failure")
                }
        }
    }

    /**
     * Function to add or edit banner image for candidate profile
     */
    fun addOrEditBannerImage(profileId: String, bannerUrl: String, callback: (String?) -> Unit) {
        viewModelScope.launch(Dispatchers.IO) {
            profilesCollection.document(profileId)
                .update("bannerUrl", bannerUrl)
                .addOnSuccessListener {
                    callback("success")
                }
                .addOnFailureListener {
                    callback(it.message ?: "no error message")
                }
        }
    }

    /**
     * Function to add or edit profile picture for candidate profile
     */
    fun addOrEditProfilePicture(
        profileId: String,
        pictureUrl: String,
        callback: (String?) -> Unit
    ) {
        viewModelScope.launch(Dispatchers.IO) {
            profilesCollection.document(profileId)
                .update("pictureUrl", pictureUrl)
                .addOnSuccessListener {
                    callback("success")
                }
                .addOnFailureListener {
                    callback(it.message ?: it.localizedMessage ?: "no error message")
                }
        }
    }

    /**
     * Function to increment view count of job offer
     */
    fun incrementJobOfferViewCount(jobOfferId: String) {
        viewModelScope.launch(Dispatchers.IO) {
            jobOffersCollection.document(jobOfferId)
                .update("viewCount", FieldValue.increment(1))
                .addOnSuccessListener {
                    TODO("Handle success")
                }
                .addOnFailureListener { e ->
                    TODO("Handle failure")
                }
        }
    }
}